"""init

Revision ID: 25765572b84d
Revises: 
Create Date: 2024-09-28 11:40:13.231881

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '25765572b84d'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('acl',
    sa.Column('id', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_by', sa.String(), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_by', sa.String(), nullable=True),
    sa.Column('update_count', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('fisherman',
    sa.Column('id', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('forename', sa.String(), nullable=False),
    sa.Column('surname', sa.String(), nullable=False),
    sa.Column('fish_species', sa.String(), nullable=False),
    sa.Column('frequency', sa.String(), nullable=False),
    sa.Column('fishing_session_duration', sa.Integer(), nullable=False),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_by', sa.String(), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_by', sa.String(), nullable=True),
    sa.Column('update_count', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('fishingday',
    sa.Column('id', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_by', sa.String(), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_by', sa.String(), nullable=True),
    sa.Column('update_count', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_fishingday_name'), 'fishingday', ['name'], unique=False)
    op.create_table('fishingwater',
    sa.Column('id', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('water_type', sa.String(), nullable=False),
    sa.Column('location', sa.String(), nullable=False),
    sa.Column('density', sa.Float(), nullable=False),
    sa.Column('m3', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_by', sa.String(), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_by', sa.String(), nullable=True),
    sa.Column('update_count', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_fishingwater_water_type'), 'fishingwater', ['water_type'], unique=False)
    op.create_table('role',
    sa.Column('id', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_by', sa.String(), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_by', sa.String(), nullable=True),
    sa.Column('update_count', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_role_name'), 'role', ['name'], unique=True)
    op.create_table('scope',
    sa.Column('id', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('entity', sa.String(), nullable=False),
    sa.Column('access', sa.String(), nullable=False),
    sa.Column('scope_name', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_by', sa.String(), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_by', sa.String(), nullable=True),
    sa.Column('update_count', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('scope_name')
    )
    op.create_table('user',
    sa.Column('id', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('password', sa.String(), nullable=True),
    sa.Column('password_expiration', sa.DateTime(timezone=True), nullable=True),
    sa.Column('refresh_token_expiration', sa.DateTime(timezone=True), nullable=True),
    sa.Column('fail_count', sa.Integer(), nullable=True),
    sa.Column('blocked_until', sa.DateTime(timezone=True), nullable=True),
    sa.Column('status', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_by', sa.String(), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_by', sa.String(), nullable=True),
    sa.Column('update_count', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)
    op.create_table('acl_scope',
    sa.Column('acl_id', sa.Uuid(), nullable=False),
    sa.Column('scope_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['acl_id'], ['acl.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['scope_id'], ['scope.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('acl_id', 'scope_id')
    )
    op.create_table('fish',
    sa.Column('id', sa.Uuid(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('species', sa.String(), nullable=False),
    sa.Column('age', sa.Integer(), nullable=False),
    sa.Column('length', sa.DECIMAL(precision=4, scale=1), nullable=False),
    sa.Column('weight_in_g', sa.Integer(), nullable=False),
    sa.Column('subspecies', sa.String(), nullable=True),
    sa.Column('active_at', sa.String(), nullable=False),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('relative_density', sa.Integer(), nullable=False),
    sa.Column('fisherman_id', sa.Uuid(), nullable=True),
    sa.Column('fishingwater_id', sa.Uuid(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_by', sa.String(), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_by', sa.String(), nullable=True),
    sa.Column('update_count', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['fisherman_id'], ['fisherman.id'], ),
    sa.ForeignKeyConstraint(['fishingwater_id'], ['fishingwater.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_fish_species'), 'fish', ['species'], unique=False)
    op.create_table('fisherman_fishingday',
    sa.Column('fisherman_id', sa.Uuid(), nullable=False),
    sa.Column('fishingday_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['fisherman_id'], ['fisherman.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['fishingday_id'], ['fishingday.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('fisherman_id', 'fishingday_id')
    )
    op.create_table('fishingwater_fisherman',
    sa.Column('fishingwater_id', sa.Uuid(), nullable=False),
    sa.Column('fisherman_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['fisherman_id'], ['fisherman.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['fishingwater_id'], ['fishingwater.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('fishingwater_id', 'fisherman_id')
    )
    op.create_table('role_acl',
    sa.Column('role_id', sa.Uuid(), nullable=False),
    sa.Column('acl_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['acl_id'], ['acl.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('role_id', 'acl_id')
    )
    op.create_table('user_role',
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('role_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'role_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_role')
    op.drop_table('role_acl')
    op.drop_table('fishingwater_fisherman')
    op.drop_table('fisherman_fishingday')
    op.drop_index(op.f('ix_fish_species'), table_name='fish')
    op.drop_table('fish')
    op.drop_table('acl_scope')
    op.drop_index(op.f('ix_user_email'), table_name='user')
    op.drop_table('user')
    op.drop_table('scope')
    op.drop_index(op.f('ix_role_name'), table_name='role')
    op.drop_table('role')
    op.drop_index(op.f('ix_fishingwater_water_type'), table_name='fishingwater')
    op.drop_table('fishingwater')
    op.drop_index(op.f('ix_fishingday_name'), table_name='fishingday')
    op.drop_table('fishingday')
    op.drop_table('fisherman')
    op.drop_table('acl')
    # ### end Alembic commands ###
